"""
    Google Maps Platform

    API Specification for Google Maps Platform  # noqa: E501

    The version of the OpenAPI document: 1.17.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from src.harness.api.google.google_client.api_client import ApiClient, Endpoint as _Endpoint
from src.harness.api.google.google_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from src.harness.api.google.google_client.model.error_response import ErrorResponse
from src.harness.api.google.google_client.model.geolocation_request import GeolocationRequest
from src.harness.api.google.google_client.model.geolocation_response import GeolocationResponse


class GeolocationAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.geolocate_endpoint = _Endpoint(
            settings={
                'response_type': (GeolocationResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/geolocation/v1/geolocate',
                'operation_id': 'geolocate',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://www.googleapis.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'geolocation_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'geolocation_request':
                        (GeolocationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'geolocation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def geolocate(
        self,
        **kwargs
    ):
        """geolocate  # noqa: E501

        Geolocation API returns a location and accuracy radius based on information about cell towers and WiFi nodes that the mobile client can detect. This document describes the protocol used to send this data to the server and to return a response to the client.  Communication is done over HTTPS using POST. Both request and response are formatted as JSON, and the content type of both is `application/json`.  You must specify a key in your request, included as the value of a`key` parameter. A `key` is your application's  API key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.google.com/maps/documentation/geolocation/get-api-key).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geolocate(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            geolocation_request (GeolocationRequest): The request body must be formatted as JSON.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GeolocationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.geolocate_endpoint.call_with_http_info(**kwargs)

