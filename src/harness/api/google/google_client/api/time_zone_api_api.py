"""
    Google Maps Platform

    API Specification for Google Maps Platform  # noqa: E501

    The version of the OpenAPI document: 1.17.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from src.harness.api.google.google_client.api_client import ApiClient, Endpoint as _Endpoint
from src.harness.api.google.google_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from src.harness.api.google.google_client.model.time_zone_response import TimeZoneResponse


class TimeZoneAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.timezone_endpoint = _Endpoint(
            settings={
                'response_type': (TimeZoneResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/maps/api/timezone/json',
                'operation_id': 'timezone',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://maps.googleapis.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'location',
                    'timestamp',
                    'language',
                ],
                'required': [
                    'location',
                    'timestamp',
                ],
                'nullable': [
                ],
                'enum': [
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('language',): {

                        "AR": "ar",
                        "BG": "bg",
                        "BN": "bn",
                        "CA": "ca",
                        "CS": "cs",
                        "DA": "da",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "EN-AU": "en-AU",
                        "EN-GB": "en-GB",
                        "ES": "es",
                        "EU": "eu",
                        "FA": "fa",
                        "FI": "fi",
                        "FIL": "fil",
                        "FR": "fr",
                        "GL": "gl",
                        "GU": "gu",
                        "HI": "hi",
                        "HR": "hr",
                        "HU": "hu",
                        "ID": "id",
                        "IT": "it",
                        "IW": "iw",
                        "JA": "ja",
                        "KN": "kn",
                        "KO": "ko",
                        "LT": "lt",
                        "LV": "lv",
                        "ML": "ml",
                        "MR": "mr",
                        "NL": "nl",
                        "NO": "no",
                        "PL": "pl",
                        "PT": "pt",
                        "PT-BR": "pt-BR",
                        "PT-PT": "pt-PT",
                        "RO": "ro",
                        "RU": "ru",
                        "SK": "sk",
                        "SL": "sl",
                        "SR": "sr",
                        "SV": "sv",
                        "TA": "ta",
                        "TE": "te",
                        "TH": "th",
                        "TL": "tl",
                        "TR": "tr",
                        "UK": "uk",
                        "VI": "vi",
                        "ZH-CN": "zh-CN",
                        "ZH-TW": "zh-TW"
                    },
                },
                'openapi_types': {
                    'location':
                        (str,),
                    'timestamp':
                        (float,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'location': 'location',
                    'timestamp': 'timestamp',
                    'language': 'language',
                },
                'location_map': {
                    'location': 'query',
                    'timestamp': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def timezone(
        self,
        location,
        timestamp,
        **kwargs
    ):
        """timezone  # noqa: E501

        The Time Zone API provides a simple interface to request the time zone for locations on the surface of the earth, as well as the time offset from UTC for each of those locations. You request the time zone information for a specific latitude/longitude pair and date. The API returns the name of that time zone, the time offset from UTC, and the daylight savings offset.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timezone(location, timestamp, async_req=True)
        >>> result = thread.get()

        Args:
            location (str): A comma-separated latitude,longitude tuple, `location=39.6034810,-119.6822510`, representing the location to look up. 
            timestamp (float): The desired time as seconds since midnight, January 1, 1970 UTC. The Time Zone API uses the `timestamp` to determine whether or not Daylight Savings should be applied, based on the time zone of the `location`.   Note that the API does not take historical time zones into account. That is, if you specify a past timestamp, the API does not take into account the possibility that the location was previously in a different time zone. 

        Keyword Args:
            language (str): The language in which to return results.  * See the [list of supported languages](https://developers.google.com/maps/faq#languagesupport). Google often updates the supported languages, so this list may not be exhaustive. * If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header. * The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component. * If a name is not available in the preferred language, the API uses the closest match. * The preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, _utca_ and _t√©r_ are synonyms for street in Hungarian.. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TimeZoneResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['location'] = \
            location
        kwargs['timestamp'] = \
            timestamp
        return self.timezone_endpoint.call_with_http_info(**kwargs)

