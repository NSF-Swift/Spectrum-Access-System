"""
    Google Maps Platform

    API Specification for Google Maps Platform  # noqa: E501

    The version of the OpenAPI document: 1.17.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from src.harness.api.google.google_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from src.harness.api.google.google_client.exceptions import ApiAttributeError


def lazy_import():
    from src.harness.api.google.google_client.model.address_component import AddressComponent
    from src.harness.api.google.google_client.model.geometry import Geometry
    from src.harness.api.google.google_client.model.place_opening_hours import PlaceOpeningHours
    from src.harness.api.google.google_client.model.place_photo import PlacePhoto
    from src.harness.api.google.google_client.model.place_review import PlaceReview
    from src.harness.api.google.google_client.model.plus_code import PlusCode
    globals()['AddressComponent'] = AddressComponent
    globals()['Geometry'] = Geometry
    globals()['PlaceOpeningHours'] = PlaceOpeningHours
    globals()['PlacePhoto'] = PlacePhoto
    globals()['PlaceReview'] = PlaceReview
    globals()['PlusCode'] = PlusCode


class Place(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('business_status',): {
            'OPERATIONAL': "OPERATIONAL",
            'CLOSED_TEMPORARILY': "CLOSED_TEMPORARILY",
            'CLOSED_PERMANENTLY': "CLOSED_PERMANENTLY",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'address_components': ([AddressComponent],),  # noqa: E501
            'adr_address': (str,),  # noqa: E501
            'business_status': (str,),  # noqa: E501
            'formatted_address': (str,),  # noqa: E501
            'formatted_phone_number': (str,),  # noqa: E501
            'geometry': (Geometry,),  # noqa: E501
            'icon': (str,),  # noqa: E501
            'icon_background_color': (str,),  # noqa: E501
            'icon_mask_base_uri': (str,),  # noqa: E501
            'international_phone_number': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'opening_hours': (PlaceOpeningHours,),  # noqa: E501
            'permanently_closed': (bool,),  # noqa: E501
            'photos': ([PlacePhoto],),  # noqa: E501
            'place_id': (str,),  # noqa: E501
            'plus_code': (PlusCode,),  # noqa: E501
            'price_level': (float,),  # noqa: E501
            'rating': (float,),  # noqa: E501
            'reference': (str,),  # noqa: E501
            'reviews': ([PlaceReview],),  # noqa: E501
            'scope': (str,),  # noqa: E501
            'types': ([str],),  # noqa: E501
            'url': (str,),  # noqa: E501
            'user_ratings_total': (float,),  # noqa: E501
            'utc_offset': (float,),  # noqa: E501
            'vicinity': (str,),  # noqa: E501
            'website': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'address_components': 'address_components',  # noqa: E501
        'adr_address': 'adr_address',  # noqa: E501
        'business_status': 'business_status',  # noqa: E501
        'formatted_address': 'formatted_address',  # noqa: E501
        'formatted_phone_number': 'formatted_phone_number',  # noqa: E501
        'geometry': 'geometry',  # noqa: E501
        'icon': 'icon',  # noqa: E501
        'icon_background_color': 'icon_background_color',  # noqa: E501
        'icon_mask_base_uri': 'icon_mask_base_uri',  # noqa: E501
        'international_phone_number': 'international_phone_number',  # noqa: E501
        'name': 'name',  # noqa: E501
        'opening_hours': 'opening_hours',  # noqa: E501
        'permanently_closed': 'permanently_closed',  # noqa: E501
        'photos': 'photos',  # noqa: E501
        'place_id': 'place_id',  # noqa: E501
        'plus_code': 'plus_code',  # noqa: E501
        'price_level': 'price_level',  # noqa: E501
        'rating': 'rating',  # noqa: E501
        'reference': 'reference',  # noqa: E501
        'reviews': 'reviews',  # noqa: E501
        'scope': 'scope',  # noqa: E501
        'types': 'types',  # noqa: E501
        'url': 'url',  # noqa: E501
        'user_ratings_total': 'user_ratings_total',  # noqa: E501
        'utc_offset': 'utc_offset',  # noqa: E501
        'vicinity': 'vicinity',  # noqa: E501
        'website': 'website',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Place - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            address_components ([AddressComponent]): An array containing the separate components applicable to this address.. [optional]  # noqa: E501
            adr_address (str): A representation of the place's address in the [adr microformat](http://microformats.org/wiki/adr).. [optional]  # noqa: E501
            business_status (str): Indicates the operational status of the place, if it is a business. If no data exists, `business_status` is not returned. . [optional]  # noqa: E501
            formatted_address (str): A string containing the human-readable address of this place.  Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom, do not allow distribution of true postal addresses due to licensing restrictions.  The formatted address is logically composed of one or more address components. For example, the address \"111 8th Avenue, New York, NY\" consists of the following components: \"111\" (the street number), \"8th Avenue\" (the route), \"New York\" (the city) and \"NY\" (the US state).  Do not parse the formatted address programmatically. Instead you should use the individual address components, which the API response includes in addition to the formatted address field.       . [optional]  # noqa: E501
            formatted_phone_number (str): Contains the place's phone number in its [local format](http://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers).. [optional]  # noqa: E501
            geometry (Geometry): [optional]  # noqa: E501
            icon (str): Contains the URL of a suggested icon which may be displayed to the user when indicating this result on a map.. [optional]  # noqa: E501
            icon_background_color (str): Contains the default HEX color code for the place's category.. [optional]  # noqa: E501
            icon_mask_base_uri (str): Contains the URL of a recommended icon, minus the `.svg` or `.png` file type extension.. [optional]  # noqa: E501
            international_phone_number (str): Contains the place's phone number in international format. International format includes the country code, and is prefixed with the plus, +, sign. For example, the international_phone_number for Google's Sydney, Australia office is `+61 2 9374 4000`.. [optional]  # noqa: E501
            name (str): Contains the human-readable name for the returned result. For `establishment` results, this is usually the canonicalized business name.. [optional]  # noqa: E501
            opening_hours (PlaceOpeningHours): [optional]  # noqa: E501
            permanently_closed (bool): Deprecated. The field `permanently_closed` is deprecated, and should not be used. Instead, use `business_status` to get the operational status of businesses.. [optional]  # noqa: E501
            photos ([PlacePhoto]): An array of photo objects, each containing a reference to an image. A request may return up to ten photos. More information about place photos and how you can use the images in your application can be found in the [Place Photos](https://developers.google.com/maps/documentation/places/web-service/photos) documentation.. [optional]  # noqa: E501
            place_id (str): A textual identifier that uniquely identifies a place. To retrieve information about the place, pass this identifier in the `place_id` field of a Places API request. For more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).. [optional]  # noqa: E501
            plus_code (PlusCode): [optional]  # noqa: E501
            price_level (float): The price level of the place, on a scale of 0 to 4. The exact amount indicated by a specific value will vary from region to region. Price levels are interpreted as follows: - 0 Free - 1 Inexpensive - 2 Moderate - 3 Expensive - 4 Very Expensive . [optional]  # noqa: E501
            rating (float): Contains the place's rating, from 1.0 to 5.0, based on aggregated user reviews.. [optional]  # noqa: E501
            reference (str): Deprecated. [optional]  # noqa: E501
            reviews ([PlaceReview]): A JSON array of up to five reviews. If a language parameter was specified in the request, the service will bias the results to prefer reviews written in that language.. [optional]  # noqa: E501
            scope (str): Deprecated.. [optional]  # noqa: E501
            types ([str]): Contains an array of feature types describing the given result. See the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types#table2).. [optional]  # noqa: E501
            url (str): Contains the URL of the official Google page for this place. This will be the Google-owned page that contains the best available information about the place. Applications must link to or embed this page on any screen that shows detailed results about the place to the user.. [optional]  # noqa: E501
            user_ratings_total (float): The total number of reviews, with or without text, for this place.. [optional]  # noqa: E501
            utc_offset (float): Contains the number of minutes this place’s current timezone is offset from UTC. For example, for places in Sydney, Australia during daylight saving time this would be 660 (+11 hours from UTC), and for places in California outside of daylight saving time this would be -480 (-8 hours from UTC).. [optional]  # noqa: E501
            vicinity (str): For establishment (`types:[\"establishment\", ...])` results only, the `vicinity` field contains a simplified address for the place, including the street name, street number, and locality, but not the province/state, postal code, or country.  For all other results, the `vicinity` field contains the name of the narrowest political (`types:[\"political\", ...]`) feature that is present in the address of the result.  This content is meant to be read as-is. Do not programmatically parse the formatted address. . [optional]  # noqa: E501
            website (str): The authoritative website for this place, such as a business' homepage.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Place - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            address_components ([AddressComponent]): An array containing the separate components applicable to this address.. [optional]  # noqa: E501
            adr_address (str): A representation of the place's address in the [adr microformat](http://microformats.org/wiki/adr).. [optional]  # noqa: E501
            business_status (str): Indicates the operational status of the place, if it is a business. If no data exists, `business_status` is not returned. . [optional]  # noqa: E501
            formatted_address (str): A string containing the human-readable address of this place.  Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom, do not allow distribution of true postal addresses due to licensing restrictions.  The formatted address is logically composed of one or more address components. For example, the address \"111 8th Avenue, New York, NY\" consists of the following components: \"111\" (the street number), \"8th Avenue\" (the route), \"New York\" (the city) and \"NY\" (the US state).  Do not parse the formatted address programmatically. Instead you should use the individual address components, which the API response includes in addition to the formatted address field.       . [optional]  # noqa: E501
            formatted_phone_number (str): Contains the place's phone number in its [local format](http://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers).. [optional]  # noqa: E501
            geometry (Geometry): [optional]  # noqa: E501
            icon (str): Contains the URL of a suggested icon which may be displayed to the user when indicating this result on a map.. [optional]  # noqa: E501
            icon_background_color (str): Contains the default HEX color code for the place's category.. [optional]  # noqa: E501
            icon_mask_base_uri (str): Contains the URL of a recommended icon, minus the `.svg` or `.png` file type extension.. [optional]  # noqa: E501
            international_phone_number (str): Contains the place's phone number in international format. International format includes the country code, and is prefixed with the plus, +, sign. For example, the international_phone_number for Google's Sydney, Australia office is `+61 2 9374 4000`.. [optional]  # noqa: E501
            name (str): Contains the human-readable name for the returned result. For `establishment` results, this is usually the canonicalized business name.. [optional]  # noqa: E501
            opening_hours (PlaceOpeningHours): [optional]  # noqa: E501
            permanently_closed (bool): Deprecated. The field `permanently_closed` is deprecated, and should not be used. Instead, use `business_status` to get the operational status of businesses.. [optional]  # noqa: E501
            photos ([PlacePhoto]): An array of photo objects, each containing a reference to an image. A request may return up to ten photos. More information about place photos and how you can use the images in your application can be found in the [Place Photos](https://developers.google.com/maps/documentation/places/web-service/photos) documentation.. [optional]  # noqa: E501
            place_id (str): A textual identifier that uniquely identifies a place. To retrieve information about the place, pass this identifier in the `place_id` field of a Places API request. For more information about place IDs, see the [place ID overview](https://developers.google.com/maps/documentation/places/web-service/place-id).. [optional]  # noqa: E501
            plus_code (PlusCode): [optional]  # noqa: E501
            price_level (float): The price level of the place, on a scale of 0 to 4. The exact amount indicated by a specific value will vary from region to region. Price levels are interpreted as follows: - 0 Free - 1 Inexpensive - 2 Moderate - 3 Expensive - 4 Very Expensive . [optional]  # noqa: E501
            rating (float): Contains the place's rating, from 1.0 to 5.0, based on aggregated user reviews.. [optional]  # noqa: E501
            reference (str): Deprecated. [optional]  # noqa: E501
            reviews ([PlaceReview]): A JSON array of up to five reviews. If a language parameter was specified in the request, the service will bias the results to prefer reviews written in that language.. [optional]  # noqa: E501
            scope (str): Deprecated.. [optional]  # noqa: E501
            types ([str]): Contains an array of feature types describing the given result. See the list of [supported types](https://developers.google.com/maps/documentation/places/web-service/supported_types#table2).. [optional]  # noqa: E501
            url (str): Contains the URL of the official Google page for this place. This will be the Google-owned page that contains the best available information about the place. Applications must link to or embed this page on any screen that shows detailed results about the place to the user.. [optional]  # noqa: E501
            user_ratings_total (float): The total number of reviews, with or without text, for this place.. [optional]  # noqa: E501
            utc_offset (float): Contains the number of minutes this place’s current timezone is offset from UTC. For example, for places in Sydney, Australia during daylight saving time this would be 660 (+11 hours from UTC), and for places in California outside of daylight saving time this would be -480 (-8 hours from UTC).. [optional]  # noqa: E501
            vicinity (str): For establishment (`types:[\"establishment\", ...])` results only, the `vicinity` field contains a simplified address for the place, including the street name, street number, and locality, but not the province/state, postal code, or country.  For all other results, the `vicinity` field contains the name of the narrowest political (`types:[\"political\", ...]`) feature that is present in the address of the result.  This content is meant to be read as-is. Do not programmatically parse the formatted address. . [optional]  # noqa: E501
            website (str): The authoritative website for this place, such as a business' homepage.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
